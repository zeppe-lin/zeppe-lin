#!/bin/sh -e
#
#  pkgmk
#
#  Copyright (c) 2000-2005 Per Liden
#  Copyright (c) 2006-2017 CRUX team (http://crux.nu)
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#  USA.
#

##
# some agreements of the declaration of variables:
# ${var} or ${VAR}  - external, global variable, declared in pkgmk.conf or Pkgfile
# $VAR              - internal, global variable
# $__VAR            - local variable

##
# error codes
readonly E_GENERAL=1
readonly E_PKGFILE=2    # invalid Pkgfile
readonly E_DIR_PERM=3   # (source/build) directory missing or missing read/write permission
readonly E_DOWNLOAD=4   # error during download
readonly E_UNPACK=5     # error during unpacking of source file(s)
readonly E_MD5=6        # md5sum verification failed
readonly E_FOOTPRINT=7  # footprint check failure
readonly E_BUILD=8      # error while running 'build()'

info() {
	echo "=======> $1"
}

warning() {
	info "WARNING: $1" >&2
}

error() {
	info "ERROR: $1" >&2
}

get_filename() {
	__ABSOLUTE=

	if [ "$1" = "-a" ]; then
		__ABSOLUTE=1
		shift
	fi

	case $1 in
		http://*/* | https://*/* | ftp://*/* | file://*/*)
			echo "$PKGMK_SOURCE_DIR/${1##*/}"
			;;
		*)
			if [ "$__ABSOLUTE" ]; then
				echo "$PKGMK_ROOT/$1"
			else
				echo "$1"
			fi
			;;
	esac
}

get_basename() {
	echo ${1##*/}
}

check_pkgfile() {
	if [ ! "$name" ]; then
		error "Variable 'name' not specified in Pkgfile."
		exit $E_PKGFILE
	elif [ ! "$version" ]; then
		error "Variable 'version' not specified in Pkgfile."
		exit $E_PKGFILE
	elif [ ! "$release" ]; then
		error "Variable 'release' not specified in Pkgfile."
		exit $E_PKGFILE
	elif ! command -V "build" 2>/dev/null | grep -qwi function; then
		error "Function 'build' not specified in Pkgfile."
		exit $E_PKGFILE
	fi
}

check_directory() {
	if [ ! -d "$1" ]; then
		error "Directory '$1' does not exist."
		exit $E_DIR_PERM
	elif [ ! -w "$1" ]; then
		error "Directory '$1' not writable."
		exit $E_DIR_PERM
	elif [ ! -x "$1" ] || [ ! -r "$1" ]; then
		error "Directory '$1' not readable."
		exit $E_DIR_PERM
	fi
}

check_file() {
	if [ -e "$1" ] && [ ! -w "$1" ]; then
		error "File '$1' is not writable."
		exit 1
	fi
}

download_file() {
	__LOCAL_FILENAME=$(get_filename "$1")
	__LOCAL_FILENAME_PARTIAL="$__LOCAL_FILENAME.partial"
	__DOWNLOAD_CMD=${PKGMK_DOWNLOAD_PROG:-wget}
	__DOWNLOAD_OPTS=
	__RESUME_CMD=
	__RESUME_OPTS=
	__BASENAME=
	__REPO=

	info "Downloading '$1'."

	if ! command -v "$__DOWNLOAD_CMD" >/dev/null; then
		error "Command '$__DOWNLOAD_CMD' not found."
		exit $E_GENERAL
	fi

	case $__DOWNLOAD_CMD in
		aria2c)
			__RESUME_CMD="-c"
			__DOWNLOAD_OPTS="--connect-timeout=10 --max-tries=3 --retry-wait=3 \
				-d $PKGMK_SOURCE_DIR -o ${__LOCAL_FILENAME_PARTIAL##*/} $PKGMK_ARIA2C_OPTS"
			;;
		curl)
			__RESUME_CMD="-C -"
			__DOWNLOAD_OPTS="-L --fail --ftp-pasv --retry 3 --retry-delay 3 \
				-o $__LOCAL_FILENAME_PARTIAL $PKGMK_CURL_OPTS"
			;;
		wget)
			__RESUME_CMD="-c"
			__DOWNLOAD_OPTS="--compression=none --passive-ftp --no-directories \
				--tries=3 --waitretry=3 \
				--directory-prefix=$PKGMK_SOURCE_DIR \
				--output-document=$__LOCAL_FILENAME_PARTIAL $PKGMK_WGET_OPTS"
		;;
	esac

	if [ -f "$__LOCAL_FILENAME_PARTIAL" ]; then
		info "Partial download found, trying to resume"
		__RESUME_OPTS=$__RESUME_CMD
	fi

	error=1

	__BASENAME=$(get_basename "$__LOCAL_FILENAME")
	for __REPO in $PKGMK_SOURCE_MIRRORS; do
		__REPO="$(echo "$__REPO" | sed 's|/$||')"

		if $__DOWNLOAD_CMD  $__DOWNLOAD_OPTS  $__RESUME_OPTS  "$__REPO/$__BASENAME"; then
			error=0
			break
		else
			error=$?
		fi
	done

	if [ $error != 0 ]; then
		while true; do
			$__DOWNLOAD_CMD  $__DOWNLOAD_OPTS  $__RESUME_OPTS  "$1"
			error=$?
			if [ $error != 0 ] && [ "$__RESUME_OPTS" ]; then
				info "Partial download failed, restarting"
				rm -f "$__LOCAL_FILENAME_PARTIAL"
				__RESUME_OPTS=""
			else
				break
			fi
		done
	fi

	if [ $error != 0 ] || [ ! -f "$__LOCAL_FILENAME_PARTIAL" ]; then
		error "Downloading '$1' failed."
		exit $E_DOWNLOAD
	fi

	mv -f "$__LOCAL_FILENAME_PARTIAL" "$__LOCAL_FILENAME"
}

download_source() {
	__FILE=
	__LOCAL_FILENAME=

	for __FILE in ${source}; do
		__LOCAL_FILENAME=$(get_filename "$__FILE")
		if [ ! -e "$__LOCAL_FILENAME" ]; then
			if [ "$__LOCAL_FILENAME" = "$__FILE" ]; then
				error "Source file '$__LOCAL_FILENAME' not found (can not be downloaded, URL not specified)."
				exit $E_DOWNLOAD
			else
				if [ "$PKGMK_DOWNLOAD" = "yes" ]; then
					download_file "$__FILE"
				else
					error "Source file '$__LOCAL_FILENAME' not found (use option -d to download)."
					exit $E_DOWNLOAD
				fi
			fi
		fi
	done
}

unpack_source() {
	__FILE=
	__LOCAL_FILENAME=
	__COMMAND=

	for __FILE in ${source}; do
		__LOCAL_FILENAME=$(get_filename "$__FILE")
		case $__LOCAL_FILENAME in
			*.tar|*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz2|*.tar.xz|*.txz|*.tar.lzma|*.tar.lz|*.zip|*.rpm|*.7z|*.zst)
				__COMMAND="bsdtar -p -o -C $SRC -xf $__LOCAL_FILENAME"
				;;
			*)
				__COMMAND="cp $__LOCAL_FILENAME $SRC"
				;;
		esac

		echo "$__COMMAND"

		if ! $__COMMAND; then
			remove_work_dir
			error "Building '$TARGET' failed."
			exit $E_UNPACK
		fi
	done
}

make_md5sum() {
	__FILE=
	__LOCAL_FILENAMES=

	if [ "${source}" ]; then
		for __FILE in ${source}; do
			__LOCAL_FILENAMES="$__LOCAL_FILENAMES $(get_filename "$__FILE")"
		done

		md5sum $__LOCAL_FILENAMES | sed -e 's:  .*/:  :' | sort -k 2
	fi
}

make_footprint() {
	pkginfo --footprint "$TARGET" | sort -k 3
}

check_md5sum() {
	__FILE="$PKGMK_WORK_DIR"/.tmp

	cd "$PKGMK_ROOT"

	if [ -f .md5sum ] && [ -s .md5sum ]; then
		echo "$(make_md5sum)" > "$__FILE.md5sum"
		sort -k 2 .md5sum > "$__FILE.md5sum.orig"
		diff -w -t -U 0 "$__FILE.md5sum.orig" "$__FILE.md5sum" \
			| sed '/^@@/d'            \
			| sed '/^+++/d'           \
			| sed '/^---/d'           \
			| sed 's/^+/NEW       /g' \
			| sed 's/^-/MISSING   /g' > "$__FILE.md5sum.diff"
		if [ -s "$__FILE.md5sum.diff" ]; then
			error "Md5sum mismatch found:"
			cat "$__FILE.md5sum.diff" >&2

			remove_work_dir

			if [ "$PKGMK_CHECK_MD5SUM" = "yes" ]; then
				error "Md5sum not ok."
				exit $E_MD5
			fi

			error "Building '$TARGET' failed."
			exit $E_MD5
		fi
	else
		if [ "$PKGMK_CHECK_MD5SUM" = "yes" ]; then
			remove_work_dir
			info "Md5sum not found."
			exit $E_MD5
		fi

		warning "Md5sum not found, creating new."
		make_md5sum > .md5sum
	fi

	if [ "$PKGMK_CHECK_MD5SUM" = "yes" ]; then
		remove_work_dir
		info "Md5sum ok."
		exit 0
	fi
}

strip_files() {
	cd "$PKG"

	if [ -f "$PKGMK_ROOT/.nostrip" ]; then
		__FILTER="grep -v -f $PKGMK_ROOT/.nostrip"
	else
		__FILTER="cat"
	fi

	find . -type f -printf "%P\n"                             \
		| $__FILTER                                       \
		| xargs -r -L10 -P${JOBS:-1}                      \
			file --no-buffer --separator '>'          \
			-e apptype -e ascii -e encoding -e tokens \
			-e cdf -e compress -e tar -e text         \
		| awk '
			BEGIN { FS = ">[ ]+" }
			$0 ~ /ELF.*executable.*not stripped/    { print "--strip-all      \"" $1 "\"" }
			$0 ~ /ELF.*shared object.*not stripped/ { print "--strip-unneeded \"" $1 "\"" }
			$2 == "current ar archive"              { print "--strip-debug    \"" $1 "\"" }
			' \
		| xargs -r -L1 -P${JOBS:-1} strip || true
}

compress_manpages() {
	__FILE=
	__TARGET=
	__DIR=

	cd "$PKG"

	find . -type f -path "*/man/man*/*" | while read __FILE; do
		if [ "$__FILE" = "${__FILE%%.gz}" ]; then
			gzip -9 "$__FILE" || true
		fi
	done

	find . -type l -path "*/man/man*/*" | while read __FILE; do
		__TARGET=$(readlink -n "$__FILE")
		__TARGET="${__TARGET##*/}"
		__TARGET="${__TARGET%%.gz}.gz"
		rm -f "$__FILE"
		__FILE="${__FILE%%.gz}.gz"
		__DIR=$(dirname "$__FILE")

		if [ -e "$__DIR/$__TARGET" ]; then
			ln -sf "$__TARGET" "$__FILE"
		fi
	done
}

check_footprint() {
	__FILE="$PKGMK_WORK_DIR/.tmp"

	cd "$PKGMK_ROOT"

	if [ -f "$TARGET" ]; then
		make_footprint > "$__FILE.footprint"

		if [ -f .footprint ]; then
			sort -k 3 .footprint > "$__FILE.footprint.orig"
			diff -w -t -U 0 "$__FILE.footprint.orig" "$__FILE.footprint" \
				| sed '/^@@/d'             \
				| sed '/^+++/d'            \
				| sed '/^---/d'            \
				| sed 's/^+/NEW       /g'  \
				| sed 's/^-/MISSING   /g'  > "$__FILE.footprint.diff"

			if [ -s "$__FILE.footprint.diff" ]; then
				error "Footprint mismatch found:"
				BUILD_SUCCESSFUL="no"
				cat "$__FILE.footprint.diff" >&2
			fi
		else
			warning "Footprint not found, creating new."
			mv "$__FILE.footprint" .footprint
		fi
	else
		error "Package '$TARGET' was not found."
		BUILD_SUCCESSFUL="no"
	fi
}

make_work_dir() {
	PKG="$PKGMK_WORK_DIR/pkg"
	SRC="$PKGMK_WORK_DIR/src"
	umask 022

	cd "$PKGMK_ROOT"
	rm -rf "$PKGMK_WORK_DIR" # must
	mkdir -p "$SRC" "$PKG"

	if [ "$PKGMK_IGNORE_MD5SUM" = "no" ]; then
		check_md5sum
	fi
}

remove_work_dir() {
	if [ "$PKGMK_KEEP_WORK" = "no" ]; then
		rm -rf "$PKGMK_WORK_DIR"
	fi
}

build_package() {
	# globals
	BUILD_SUCCESSFUL="no" 

	# locals
	__COMPRESSION=

	check_file "$TARGET"
	make_work_dir

	if [ "$(id -u)" != 0 ]; then
		warning "Packages should be built as root."
	fi

	info "Building '$TARGET' started $(date)."

	unpack_source

	cd "$SRC"

	(set -e -x; build)
	if [ $? = 0 ]; then
		if [ "$PKGMK_NO_STRIP" = "no" ]; then
			strip_files
		fi

		compress_manpages

		cd "$PKG"
		info "Build result:"

		case $PKGMK_COMPRESSION_MODE in
			gz)  __COMPRESSION="-z" ;;
			bz2) __COMPRESSION="-j" ;;
			xz)  __COMPRESSION="-J" ;;
			lz)  __COMPRESSION="--lzip" ;;
		esac

		if bsdtar -c $__COMPRESSION -f "$TARGET" -- *  &&  bsdtar -t -v -f "$TARGET"; then
			BUILD_SUCCESSFUL="yes"

			if [ "$PKGMK_IGNORE_FOOTPRINT" = "yes" ]; then
				warning "Footprint ignored."
			else
				check_footprint
				if [ "$BUILD_SUCCESSFUL" = "no" ]; then
					remove_work_dir
					exit $E_FOOTPRINT
				fi
			fi
		fi
	fi

	remove_work_dir

	if [ "$BUILD_SUCCESSFUL" = "yes" ]; then
		info "Building '$TARGET' succeeded $(date)."
	else
		if [ -f "$TARGET" ]; then
			touch -r "$PKGMK_ROOT/Pkgfile" "$TARGET" >/dev/null 1>&2
		fi
		error "Building '$TARGET' failed."
		exit $E_BUILD
	fi
}

clean() {
	__FILE=
	__LOCAL_FILENAME=

	if [ -f "$TARGET" ]; then
		info "Removing $TARGET"
		rm -f "$TARGET"
	fi

	for __FILE in ${source}; do
		__LOCAL_FILENAME=$(get_filename "$__FILE")
		if [ -e "$__LOCAL_FILENAME" ] && [ "$__LOCAL_FILENAME" != "$__FILE" ]; then
			info "Removing $__LOCAL_FILENAME"
			rm -f "$__LOCAL_FILENAME"
		fi
	done
}

update_footprint() {
	if [ ! -f "$TARGET" ]; then
		error "Unable to update footprint. File '$TARGET' not found."
		exit 1
	fi

	check_file ".footprint"
	make_footprint > .footprint
	touch "$TARGET"

	info "Footprint updated."
}

build_needed() {
	__FILE=
	__RESULT="yes"

	if [ -f "$TARGET" ]; then
		__RESULT="no"
		for __FILE in Pkgfile ${source}; do
			__FILE=$(get_filename "$__FILE")
			if [ -e "$__FILE" ] && ! test "$TARGET" -nt "$__FILE"; then
				__RESULT="yes"
				break
			fi
		done
	fi

	echo $__RESULT
}

interrupted() {
	echo ""
	error "Interrupted."
	exit 1
}

atexit() {
	remove_work_dir
}

print_help() {
	cat <<EOF
Usage: pkgmk [OPTION]...
Make software package.

Mandatory arguments to long options are mandatory for short options too.
  -d,   --download           download missing source file(s)
  -do,  --download-only      do not build, only download missing source file(s)
  -eo,  --extract-only       do not build, only extract source file(s)
  -utd, --up-to-date         do not build, only check if package is up to date
  -uf,  --update-footprint   update footprint using result from last build
  -if,  --ignore-footprint   build package without checking footprint
  -um,  --update-md5sum      update md5sum
  -im,  --ignore-md5sum      build package without checking md5sum
  -cm,  --check-md5sum       do not build, only check md5sum
  -ns,  --no-strip           do not strip executable binaries or libraries
  -f,   --force              build package even if it appears to be up to date
  -c,   --clean              remove package and downloaded files
  -kw,  --keep-work          keep temporary working directory
  -cf,  --config-file FILE   use alternative configuration file
  -v,   --version            print version and exit
  -h,   --help               print help and exit
EOF
}

parse_options() {
	while [ "$1" ]; do
		case $1 in
			-d|--download)
				PKGMK_DOWNLOAD="yes"
				;;
			-do|--download-only)
				PKGMK_DOWNLOAD="yes"
				PKGMK_DOWNLOAD_ONLY="yes"
				;;
			-eo|--extract-only)
				PKGMK_EXTRACT_ONLY="yes"
				;;
			-utd|--up-to-date)
				PKGMK_UP_TO_DATE="yes"
				;;
			-uf|--update-footprint)
				PKGMK_UPDATE_FOOTPRINT="yes"
				;;
			-if|--ignore-footprint)
				PKGMK_IGNORE_FOOTPRINT="yes"
				;;
			-um|--update-md5sum)
				PKGMK_UPDATE_MD5SUM="yes"
				;;
			-im|--ignore-md5sum)
				PKGMK_IGNORE_MD5SUM="yes"
				;;
			-cm|--check-md5sum)
				PKGMK_CHECK_MD5SUM="yes"
				;;
			-ns|--no-strip)
				PKGMK_NO_STRIP="yes"
				;;
			-f|--force)
				PKGMK_FORCE="yes"
				;;
			-c|--clean)
				PKGMK_CLEAN="yes"
				;;
			-kw|--keep-work)
				PKGMK_KEEP_WORK="yes"
				;;
			-cf|--config-file)
				if [ ! "$2" ]; then
					echo "pkgmk: option $1 requires an argument"
					exit 1
				fi
				PKGMK_CONFFILE="$2"
				shift
				;;
			-v|--version)
				echo "pkgmk @VERSION@"
				exit 0
				;;
			-h|--help)
				print_help
				exit 0
				;;
			*)
				echo "pkgmk: invalid option $1"
				exit 1
				;;
		esac
		shift
	done
}

main() {
	# globals
	TARGET=

	if [ -f .32bit ]; then
		PKGMK_ARCH=32
	else
		# multilib
		PKGMK_ARCH=64
	fi

	# locals
	__FILE=

	parse_options "$@"

	for __FILE in ./Pkgfile $PKGMK_CONFFILE; do
		if [ ! -f $__FILE ]; then
			error "File '$__FILE' not found."
			exit 1
		fi
		. $__FILE
	done

	check_directory "$PKGMK_SOURCE_DIR"
	check_directory "$PKGMK_PACKAGE_DIR"
	check_directory "$(dirname "$PKGMK_WORK_DIR")"

	check_pkgfile

	case $PKGMK_COMPRESSION_MODE in
		gz|bz2|xz|lz)
			TARGET="$PKGMK_PACKAGE_DIR/$name#$version-$release.pkg.tar.$PKGMK_COMPRESSION_MODE"
			;;
		*)
			error "Compression mode '$PKGMK_COMPRESSION_MODE' not supported"
			exit 1
			;;
	esac

	if [ "$PKGMK_CLEAN" = "yes" ]; then
		clean
		exit 0
	fi

	if [ "$PKGMK_UPDATE_FOOTPRINT" = "yes" ]; then
		update_footprint
		exit 0
	fi

	if [ "$PKGMK_UPDATE_MD5SUM" = "yes" ]; then
		download_source
		check_file ".md5sum"
		make_md5sum > .md5sum
		info "Md5sum updated."
		exit 0
	fi

	if [ "$PKGMK_DOWNLOAD_ONLY" = "yes" ]; then
		download_source
		exit 0
	fi

	if [ "$PKGMK_EXTRACT_ONLY" = "yes" ]; then
		download_source
		make_work_dir
		info "Extracting sources of package '$name-$version'."
		unpack_source
		exit 0
	fi

	if [ "$PKGMK_UP_TO_DATE" = "yes" ]; then
		if [ "$(build_needed)" = "yes" ]; then
			info "Package '$TARGET' is not up to date."
		else
			info "Package '$TARGET' is up to date."
		fi
		exit 0
	fi

	if [ "$(build_needed)" = "no" ] && [ "$PKGMK_FORCE" = "no" ] && [ "$PKGMK_CHECK_MD5SUM" = "no" ]; then
		info "Package '$TARGET' is up to date."
	else
		download_source
		build_package
	fi

	exit 0
}

trap "interrupted" HUP INT QUIT TERM
trap "atexit" EXIT

export LC_ALL=C.UTF-8

readonly PKGMK_ROOT="$PWD"

PKGMK_CONFFILE="/etc/pkgmk.conf"

PKGMK_SOURCE_MIRRORS=
PKGMK_SOURCE_DIR="$PWD"
PKGMK_PACKAGE_DIR="$PWD"
PKGMK_WORK_DIR="$PWD/work"

PKGMK_COMPRESSION_MODE="gz"

PKGMK_DOWNLOAD="no"
PKGMK_DOWNLOAD_ONLY="no"
PKGMK_EXTRACT_ONLY="no"
PKGMK_UP_TO_DATE="no"
PKGMK_UPDATE_FOOTPRINT="no"
PKGMK_IGNORE_FOOTPRINT="no"
PKGMK_FORCE="no"
PKGMK_KEEP_WORK="no"
PKGMK_UPDATE_MD5SUM="no"
PKGMK_IGNORE_MD5SUM="no"
PKGMK_CHECK_MD5SUM="no"
PKGMK_NO_STRIP="no"
PKGMK_CLEAN="no"

main "$@"

# End of file.
